generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

enum WhoCanSee {
  EVERYONE
  FRIENDS
  NOBODY
}

enum WhoCanSend {
  EVERYONE
  FRIENDS
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  name            String
  email           String  @unique(map: "email_1")
  username        String  @unique(map: "username_1")
  avatar          String  @default("https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png") // Use Custom Models to set form env variable
  bio             String  @default("")
  password        String
  isEmailVerified Boolean @default(false)
  otp             String?
  otpExpiry       Float?

  secondaryEmail           String?
  isSecondaryEmailVerified Boolean? @default(false)
  secondaryEmailOtp        String?
  secondaryEmailOtpExpiry  Float?

  lastSeen DateTime? @db.Date

  whoCanSeeActiveStatus WhoCanSee  @default(FRIENDS)
  whoCanSeeAvatar       WhoCanSee  @default(EVERYONE)
  whoCanSeeBio          WhoCanSee  @default(EVERYONE)
  whoCanSeeFriendsList  WhoCanSee  @default(FRIENDS)
  whoCanSeeLastSeen     WhoCanSee  @default(FRIENDS)
  whoCanSeeStatus       WhoCanSee  @default(FRIENDS)
  whoCanSendYouMessage  WhoCanSend @default(FRIENDS)

  blockedIds   String[] @db.ObjectId
  blocked      User[]   @relation("BlockedUser", fields: [blockedIds], references: [id])
  blockedByIds String[] @db.ObjectId
  blockedBy    User[]   @relation("BlockedUser", fields: [blockedByIds], references: [id])

  receivedFriendRequestsIds String[] @db.ObjectId
  receivedFriendRequests    User[]   @relation("FriendRequests", fields: [receivedFriendRequestsIds], references: [id])
  sentFriendRequestsIds     String[] @db.ObjectId
  sentFriendRequests        User[]   @relation("FriendRequests", fields: [sentFriendRequestsIds], references: [id])

  friendsIds  String[] @db.ObjectId
  friends     User[]   @relation("Friends", fields: [friendsIds], references: [id])
  friendOfIds String[] @db.ObjectId
  friendOf    User[]   @relation("Friends", fields: [friendOfIds], references: [id])
  status      Status[] @relation("statusAuthorUser")

  chatsIds String[] @db.ObjectId
  Chats    Chat[]   @relation("ChatMemberUser", fields: [chatsIds], references: [id])

  seenStatusIds  String[]   @ignore @db.ObjectId
  seenStatus     Status[]   @relation("statusSeenByUser", fields: [seenStatusIds], references: [id]) @ignore
  seenMessageIds String[]   @ignore @db.ObjectId
  seenMessage    Message[]  @relation("MessageSeenByUser", fields: [seenStatusIds], references: [id]) @ignore
  adminOfChatIds String[]   @ignore @db.ObjectId
  adminOfChats   Chat[]     @relation("ChatAdminUser", fields: [adminOfChatIds], references: [id]) @ignore
  messagesIds    String[]   @db.ObjectId
  messages       Message[]  @relation("MessageAuthorUser")
  reactionIds    String[]   @ignore @db.ObjectId
  reactions      Reaction[] @relation("ReactionAuthorUser") @ignore

  @@map("users")
}

enum StatusMediaType {
  IMAGE
  VIDEO
}

model Status {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  caption   String?
  media     String
  mediaType StatusMediaType

  seenByIds String[] @db.ObjectId
  seenBy    User[]   @relation("statusSeenByUser", fields: [seenByIds], references: [id])

  authorId String @db.ObjectId
  author   User   @relation("statusAuthorUser", fields: [authorId], references: [id])

  replies Message[] @relation("StatusMessage")

  @@index([createdAt], map: "createdAt_1")
  @@map("status")
}

enum MediaType {
  IMAGE
  VIDEO
  OTHER
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  emoji String

  authorId String @db.ObjectId
  author   User   @relation("ReactionAuthorUser", fields: [authorId], references: [id])

  messageId String  @db.ObjectId
  message   Message @relation("ReactionMessage", fields: [messageId], references: [id])

  @@map("reactions")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  authorId String @db.ObjectId
  author   User   @relation("MessageAuthorUser", fields: [authorId], references: [id])

  text      String     @default("")
  media     String?
  mediaType MediaType?

  seenByIds String[] @db.ObjectId
  seenBy    User[]   @relation("MessageSeenByUser", fields: [seenByIds], references: [id])

  reactionsIds String[]   @db.ObjectId
  reactions    Reaction[] @relation("ReactionMessage")

  forwarded Boolean @default(false)
  chatId    String  @db.ObjectId
  Chat      Chat    @relation("ChatMessage", fields: [chatId], references: [id])

  statusId String? @db.ObjectId
  status   Status? @relation("StatusMessage", fields: [statusId], references: [id])

  @@map("messages")
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  membersIds String[] @db.ObjectId
  members    User[]   @relation("ChatMemberUser", fields: [membersIds], references: [id])
  adminsIds  String[] @db.ObjectId
  admins     User[]   @relation("ChatAdminUser", fields: [adminsIds], references: [id])

  isPrivate Boolean

  title       String  @default("Chat Room")
  description String?
  avatar      String?

  messages Message[] @relation("ChatMessage")

  @@map("chats")
}
